{"mappings":"YAAA,IAAMA,EAAOC,SAASC,cAAc,SAgB5B,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAChCC,EAAYC,YAAW,WACvBJ,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,UAErBS,aAAaF,E,GACZP,E,IAxBPL,EAAKe,iBAAiB,UAAU,SAACC,GAC/BA,EAAEC,iBAEF,IAAMC,EAAalB,EAAKE,cAAc,uBAChCiB,EAAYnB,EAAKE,cAAc,sBAC/BkB,EAAcpB,EAAKE,cAAc,wBAEjCG,EAAQgB,SAASH,EAAWI,MAAO,IACnCC,EAAOF,SAASF,EAAUG,MAAO,KAoBzC,SAAwBE,EAAQC,EAAcF,GAG5C,IAFA,IAAIG,EAAeD,EAEVE,EAAI,EAAGA,GAAKH,EAAQG,IAC3BxB,EAAcwB,EAAGD,GACdE,MAAK,SAAAC,G,IAAGzB,EAAQyB,EAARzB,SAAUC,EAAKwB,EAALxB,MACjByB,SAASC,OAAOC,QAAQ,uBAAwCC,OAAf7B,EAAS,QAAY6B,OAAN5B,EAAM,M,IAEvE6B,OAAM,SAAAL,G,IAAGzB,EAAQyB,EAARzB,SAAUC,EAAKwB,EAALxB,MAClByB,SAASC,OAAOI,QAAQ,sBAAqCF,OAAf7B,EAAS,QAAY6B,OAAN5B,EAAM,M,IAGvEqB,GAAgBH,C,CA7BlBa,CAFef,SAASD,EAAYE,MAAO,IAEpBjB,EAAOkB,E","sources":["src/js/03-promises.js"],"sourcesContent":["const form = document.querySelector('.form');\n\n        form.addEventListener('submit', (e) => {\n          e.preventDefault();\n\n          const delayInput = form.querySelector('input[name=\"delay\"]');\n          const stepInput = form.querySelector('input[name=\"step\"]');\n          const amountInput = form.querySelector('input[name=\"amount\"]');\n\n          const delay = parseInt(delayInput.value, 10);\n          const step = parseInt(stepInput.value, 10);\n          const amount = parseInt(amountInput.value, 10);\n\n          createPromises(amount, delay, step);\n        });\n\n        function createPromise(position, delay) {\n          return new Promise((resolve, reject) => {\n            const shouldResolve = Math.random() > 0.3;\n            const timeoutId = setTimeout(() => {\n              if (shouldResolve) {\n                resolve({ position, delay });\n              } else {\n                reject({ position, delay });\n              }\n              clearTimeout(timeoutId);\n            }, delay);\n          });\n        }\n\n        function createPromises(amount, initialDelay, step) {\n          let currentDelay = initialDelay;\n\n          for (let i = 1; i <= amount; i++) {\n            createPromise(i, currentDelay)\n              .then(({ position, delay }) => {\n                Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n              })\n              .catch(({ position, delay }) => {\n                Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n              });\n\n            currentDelay += step;\n          }\n        }"],"names":["$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","timeoutId","setTimeout","clearTimeout","addEventListener","e","preventDefault","delayInput","stepInput","amountInput","parseInt","value","step","amount","initialDelay","currentDelay","i","then","param","Notiflix","Notify","success","concat","catch","failure","$ce04d3a99e08e73b$var$createPromises"],"version":3,"file":"03-promises.0051c502.js.map"}