{"mappings":"AAAA,MAAMA,EAAOC,SAASC,cAAc,SAgB5B,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GAChCC,EAAYC,YAAW,KACvBJ,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,IAErBS,aAAaF,EAAU,GACtBP,EAAM,G,CAxBbL,EAAKe,iBAAiB,UAAWC,IAC/BA,EAAEC,iBAEF,MAAMC,EAAalB,EAAKE,cAAc,uBAChCiB,EAAYnB,EAAKE,cAAc,sBAC/BkB,EAAcpB,EAAKE,cAAc,wBAEjCG,EAAQgB,SAASH,EAAWI,MAAO,IACnCC,EAAOF,SAASF,EAAUG,MAAO,KAoBzC,SAAwBE,EAAQC,EAAcF,GAC5C,IAAIG,EAAeD,EAEnB,IAAK,IAAIE,EAAI,EAAGA,GAAKH,EAAQG,IAC3BxB,EAAcwB,EAAGD,GACdE,MAAK,EAACxB,SAAEA,EAAQC,MAAEA,MACjBwB,SAASC,OAAOC,QAAQ,uBAAqB3B,QAAiBC,MAAU,IAEzE2B,OAAM,EAAC5B,SAAEA,EAAQC,MAAEA,MAClBwB,SAASC,OAAOG,QAAQ,sBAAoB7B,QAAeC,MAAU,IAGzEqB,GAAgBH,C,CA7BlBW,CAFeb,SAASD,EAAYE,MAAO,IAEpBjB,EAAOkB,EAAK","sources":["src/js/03-promises.js"],"sourcesContent":["const form = document.querySelector('.form');\n\n        form.addEventListener('submit', (e) => {\n          e.preventDefault();\n\n          const delayInput = form.querySelector('input[name=\"delay\"]');\n          const stepInput = form.querySelector('input[name=\"step\"]');\n          const amountInput = form.querySelector('input[name=\"amount\"]');\n\n          const delay = parseInt(delayInput.value, 10);\n          const step = parseInt(stepInput.value, 10);\n          const amount = parseInt(amountInput.value, 10);\n\n          createPromises(amount, delay, step);\n        });\n\n        function createPromise(position, delay) {\n          return new Promise((resolve, reject) => {\n            const shouldResolve = Math.random() > 0.3;\n            const timeoutId = setTimeout(() => {\n              if (shouldResolve) {\n                resolve({ position, delay });\n              } else {\n                reject({ position, delay });\n              }\n              clearTimeout(timeoutId);\n            }, delay);\n          });\n        }\n\n        function createPromises(amount, initialDelay, step) {\n          let currentDelay = initialDelay;\n\n          for (let i = 1; i <= amount; i++) {\n            createPromise(i, currentDelay)\n              .then(({ position, delay }) => {\n                Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n              })\n              .catch(({ position, delay }) => {\n                Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n              });\n\n            currentDelay += step;\n          }\n        }"],"names":["$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","timeoutId","setTimeout","clearTimeout","addEventListener","e","preventDefault","delayInput","stepInput","amountInput","parseInt","value","step","amount","initialDelay","currentDelay","i","then","Notiflix","Notify","success","catch","failure","$47d4ff9957288465$var$createPromises"],"version":3,"file":"03-promises.1b7c2e6a.js.map"}